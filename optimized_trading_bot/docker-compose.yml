# Optimized Trading Bot - Docker Compose Configuration
# This file defines the complete trading bot infrastructure

version: '3.8'

services:
  # Main Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: optimized-trading-bot
    restart: always
    deploy:
      resources:
        limits:
          memory: 400M
          cpus: '0.5'
        reservations:
          memory: 200M
          cpus: '0.25'
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backups:/app/backups
      - ./config:/app/config:ro
    ports:
      - "8080:8080"  # Dashboard
      - "8000:8000"  # Prometheus metrics
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: always
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: trading-bot-postgres
    restart: always
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.3'
        reservations:
          memory: 100M
          cpus: '0.15'
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_bot"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading-network
    depends_on:
      - trading-bot

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=trading123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - trading-network
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: trading-bot-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trading-network
    depends_on:
      - trading-bot
      - grafana
    profiles:
      - production

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: trading-bot-loki
    restart: unless-stopped
    volumes:
      - ./docker/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - trading-network
    profiles:
      - logging

  # Log collection (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: trading-bot-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/trading-bot:ro
      - ./docker/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - trading-network
    depends_on:
      - loki
    profiles:
      - logging

  # Backup service
  backup:
    build:
      context: .
      dockerfile: docker/Dockerfile.backup
    container_name: trading-bot-backup
    restart: "no"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_pass
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./backups:/backups
      - postgres-data:/postgres-data:ro
    networks:
      - trading-network
    depends_on:
      - postgres
    profiles:
      - backup

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health checks and monitoring
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s