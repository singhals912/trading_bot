version: '3.8'

services:
  trading-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-2.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: trading-bot-prod
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src:/app
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TZ=UTC
      # Trading Configuration
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_PAPER_TRADING=${ALPACA_PAPER_TRADING:-true}
      # Dashboard Configuration
      - DASHBOARD_PORT=${DASHBOARD_PORT:-8080}
      - ENABLE_DASHBOARD=${ENABLE_DASHBOARD:-true}
    ports:
      - "${DASHBOARD_PORT:-8080}:8080"
    volumes:
      # Persistent data storage
      - ../logs:/app/logs
      - ../data:/app/data
      - ../backups:/app/backups
      - ../config:/app/config
      # Environment configuration (read-only)
      - ../.env:/app/.env:ro
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 800M
          cpus: '0.5'
        reservations:
          memory: 400M
          cpus: '0.1'

  # Optional: Lightweight monitoring
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - trading-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for enhanced caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-trading_redis}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  redis_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16